;; -*- mode: emacs-lisp -*-

;; +---------+
;; | Storage |
;; +---------+

(defvar _balances (mapping address uint256))
(defvar _allowances (mapping address (mapping address uint256)))
(defvar _totalSupply uint256)

;; +-----------+
;; | Modifiers |
;; +-----------+

(defun not-payable ()
  (when (call-value)
    (revert "function is not payable")))

;; +---------+
;; | Helpers |
;; +---------+

(defun assert-address (address)
  (defconst address-mask 0xffffffffffffffffffffffffffffffffffffffff) ; 2^160 - 1
  (let ((masked (logand address address-mask)))
    (unless (= address masked)
      (revert "invalid address"))))

;; +------------------+
;; | Public functions |
;; +------------------+

(defun totalSupply () _totalSupply)

(defun balanceOf (address)
  (assert-address address)
  (gethash _balances address))

(defun transfer (to value)
  (not-payable)
  (assert-address to)
  (not-payable))

(defun allowance (owner spender)
  (assert-address owner)
  (assert-address spender)
  (gethash _allowances owner spender))

(defun approve (spender value)
  (not-payable)
  (assert-address spender)
  (puthash _allowances value (caller) spender))

(defun transferFrom (from to value)
  (not-payable)
  (assert-address from)
  (assert-address to)

  (unless (<= value (allowance from (caller)))
    (revert "not allowed"))

  (unless (<= value (balanceOf from))
    (revert "not enough"))

  (puthash _balances
           (- (gethash _balances from) value)
           from)
  (puthash _balances
           (+ (gethash _balances to) value)
           to))

(defun name () (revert "Emacs Lisp Token"))
(defun symbol () (revert "ELT"))
(defun decimals () 18)

(defun mint ()
  (not-payable)
  (unless (< _totalSupply (ether "15803")) ; 3dbb
    (revert "maximum token limit reached"))
  (setq _totalSupply
        (puthash _balances
                 (+ (gethash _balances (caller))
                    (ether "1"))
                 (caller))))

(dispatch
 ;; IERC20
 ("totalSupply()" totalSupply)
 ("balanceOf(address)" balanceOf)
 ("transfer(address,uint256)" transfer)
 ("allowance(address,address)" allowance)
 ("approve(address,uint256)" approve)
 ("transferFrom(address,address,uint256)" transferFrom)
 ;; IERC20Metadata
 ("name()" name)
 ("symbol()" symbol)
 ("decimals()" decimals)
 ;; Other
 ("mint()" mint))
