import { ethers } from "hardhat";
import { ContractTransaction, Signer, TransactionResponse } from "ethers";
import { IToken } from "../typechain-types";

async function main() {
    const hero: Signer = await ethers.getSigners().then(
        (signers: Signer[]): Signer => signers[0]
    );
    const heroAddr: string = await hero.getAddress();
    console.log("HERO:", heroAddr, ethers.formatEther(await ethers.provider.getBalance(heroAddr)));

    const create: TransactionResponse = await hero.sendTransaction({
        type: 2,
        data: "0x610ac18061000d6000396000f3608060405260003560e01c80631249c58b14156101a857346100225760006100bf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b506729a2241af62c000060025410610172576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001b81602401527f6d6178696d756d20746f6b656e206c696d6974207265616368656400000000008160440152606490fd610175565b60005b50670de0b6b3a7640000336000526001602052604060002054018033600052600160205260406000205580600255610abe565b806318160ddd14156101c45760206040516002548152f3610abe565b806370a0823114156102b65760043573ffffffffffffffffffffffffffffffffffffffff8116808214610292576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd610294565b815b9050905060206040518260005260016020526040600020548152f39050610abe565b8063a9059cbb141561043e5760243560043573ffffffffffffffffffffffffffffffffffffffff8116808214610387576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd610389565b815b9050905034610399576000610436565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b915050610abe565b8063dd62ed3e14156105e45760243573ffffffffffffffffffffffffffffffffffffffff811680821461050c576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd61050e565b815b9050905060043573ffffffffffffffffffffffffffffffffffffffff81168082146105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd6105d6565b815b905090506000915050610abe565b8063095ea7b3141561076c5760243560043573ffffffffffffffffffffffffffffffffffffffff81168082146106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd6106b7565b815b90509050346106c7576000610764565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b915050610abe565b806323b872dd14156109bd5760443560243573ffffffffffffffffffffffffffffffffffffffff811680821461083d576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd61083f565b815b9050905060043573ffffffffffffffffffffffffffffffffffffffff8116808214610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd610907565b815b90509050346109175760006109b4565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b92505050610abe565b806306fdde0314156109e85760206040517090456d616373204c69737020546f6b656e8152f3610abe565b806395d89b411415610a065760206040516383454c548152f3610abe565b8063313ce5671415610a2157602060405160128152f3610abe565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001581602401527f756e7265636f676e697a65642066756e6374696f6e00000000000000000000008160440152606490fd5b9050",
    });
    const address: string = ethers.getCreateAddress(create);
    console.log("ADDR:", address);

    // const address: string = "0x32BD158B9fbfC21FbB4E5d67A3aBc475b4343c59";
    const token: IToken = await ethers.getContractAt("IToken", address)

    // console.log(await token.connect(hero).mint());
    // const tx: ContractTransaction = await token.mint.populateTransaction({ value: 1 });
    // await hero.sendTransaction(tx);

    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());

    // console.log("BEFORE:", await token.totalSupply());

    // console.log("DATA:", tx.data);
    // const result: TransactionResponse =
  
    // // const result = await token.something.send();
    // // const result: string = await hero.call(tx);
    // // console.log("RESULT:", result);
    // // console.log("RESULT.DATA:", result.data);

    // console.log("AFTER:", await token.totalSupply());

    // console.log(await ethers.provider.getStorage(address, 0));

    // console.log("BALANCE:", await token.balanceOf(heroAddr));
    // console.log("BALANCE:", await token.balanceOf.populateTransaction(heroAddr));
}

main().then(
    () => process.exit(0),
    (reason: any) => {
        console.error(reason);
        process.exit(1);
    }
);
