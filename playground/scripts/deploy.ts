import { ethers } from "hardhat";
import { ContractTransaction, Signer, TransactionResponse } from "ethers";
import { IToken } from "../typechain-types";

async function main() {
    const hero: Signer = await ethers.getSigners().then(
        (signers: Signer[]): Signer => signers[0]
    );
    const heroAddr: string = await hero.getAddress();
    console.log("HERO:", heroAddr, ethers.formatEther(await ethers.provider.getBalance(heroAddr)));

    const create: TransactionResponse = await hero.sendTransaction({
        type: 2,
        data: "0x610bc18061000d6000396000f3608060405260003560e01c806318160ddd14156100265760206040516002548152f3610bbe565b806370a08231141561011b5760206040516004358073ffffffffffffffffffffffffffffffffffffffff81168082146100fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd6100fd565b60005b905090505060006014528060005260406000205490508152f3610bbe565b8063a9059cbb141561035057602435600435346101395760006101d6565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b508073ffffffffffffffffffffffffffffffffffffffff8116808214610297576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd61029a565b60005b9050905050346102ab576000610348565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b915050610bbe565b8063dd62ed3e141561051d5760206040516024356004358073ffffffffffffffffffffffffffffffffffffffff8116808214610427576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd61042a565b60005b90509050508173ffffffffffffffffffffffffffffffffffffffff81168082146104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd6104f2565b60005b90509050506001601452806000526040600020601452816000526040600020549150508152f3610bbe565b8063095ea7b314156106c6576024356004353461053b5760006105d8565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b508073ffffffffffffffffffffffffffffffffffffffff8116808214610699576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd61069c565b60005b90509050508180600160145233600052604060002060145282600052604060002055915050610bbe565b806323b872dd141561091d57604435602435600435346106e7576000610784565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b508073ffffffffffffffffffffffffffffffffffffffff8116808214610845576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd610848565b60005b90509050508173ffffffffffffffffffffffffffffffffffffffff811680821461090d576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000000f81602401527f696e76616c6964206164647265737300000000000000000000000000000000008160440152606490fd610910565b60005b9050905092505050610bbe565b806306fdde0314156109485760206040517090456d616373204c69737020546f6b656e8152f3610bbe565b806395d89b4114156109665760206040516383454c548152f3610bbe565b8063313ce567141561098157602060405160128152f3610bbe565b80631249c58b1415610b215734610999576000610a36565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001781602401527f66756e6374696f6e206973206e6f742070617961626c650000000000000000008160440152606490fd5b50690358aeae441e1a0c000060025410610aeb576040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001b81602401527f6d6178696d756d20746f6b656e206c696d6974207265616368656400000000008160440152606490fd610aee565b60005b50670de0b6b3a7640000600060145233600052604060002054018060006014523360005260406000205580600255610bbe565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000002081600401527f000000000000000000000000000000000000000000000000000000000000001581602401527f756e7265636f676e697a65642066756e6374696f6e00000000000000000000008160440152606490fd5b9050",
    });
    const address: string = ethers.getCreateAddress(create);
    console.log("ADDR:", address);

    // const address: string = "0x32BD158B9fbfC21FbB4E5d67A3aBc475b4343c59";
    const token: IToken = await ethers.getContractAt("IToken", address)

    // console.log(await token.connect(hero).mint());
    // const tx: ContractTransaction = await token.mint.populateTransaction({ value: 1 });
    // await hero.sendTransaction(tx);

    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());
    await token.connect(hero).mint();
    console.log(await token.balanceOf(heroAddr), await token.totalSupply());

    const SPENDER: string = "0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97";
    console.log("allowance before:", await token.allowance(heroAddr, SPENDER));
    await token.connect(hero).approve(SPENDER, 0x100);
    console.log("allowance after:", await token.allowance(heroAddr, SPENDER));

    // console.log("BEFORE:", await token.totalSupply());

    // console.log("DATA:", tx.data);
    // const result: TransactionResponse =
  
    // // const result = await token.something.send();
    // // const result: string = await hero.call(tx);
    // // console.log("RESULT:", result);
    // // console.log("RESULT.DATA:", result.data);

    // console.log("AFTER:", await token.totalSupply());

    // console.log(await ethers.provider.getStorage(address, 0));

    // console.log("BALANCE:", await token.balanceOf(heroAddr));
    // console.log("BALANCE:", await token.balanceOf.populateTransaction(heroAddr));
}

main().then(
    () => process.exit(0),
    (reason: any) => {
        console.error(reason);
        process.exit(1);
    }
);
